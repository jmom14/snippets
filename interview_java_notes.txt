Clase: Definicion de las propiedades y funcionalidades de un objeto

Objeto: Instancia de una clase con atributos y operaciones dispobibles

Polimorfismo: Habilidad de ejecutar metodos sintaticamente iguales en tipos distintos

Encapsulation:
  The word, “encapsulate,” means to enclose something. Just like a pill "encapsulates" or contains the medication inside of its coating, the principle of encapsulation works in a similar way in OOP: by forming a protective barrier around the information contained within a class from the rest of the code.
  In OOP, we encapsulate by binding the data and functions which operate on that data into a single unit, the class. By doing so, we can hide private details of a class from the outside world and only expose functionality that is important for interfacing with it. When a class does not allow calling code access to its private data directly, we say that it is well encapsulated.

Abstraction
  Often, it’s easier to reason and design a program when you can separate the interface of a class from its implementation, and focus on the interface. This is akin to treating a system as a “black box,” where it’s not important to understand the gory inner workings in order to reap the benefits of using it.
  This process is called “abstraction” in OOP, because we are abstracting away the gory implementation details of a class and only presenting a clean and easy-to-use interface via the class’ member functions. Carefully used, abstraction helps isolate the impact of changes made to the code, so that if something goes wrong, the change will only affect the implementation details of a class and not the outside code.
 
 Inheritance
  Object-oriented languages that support classes almost always support the notion of “inheritance.” Classes can be organized into hierarchies, where a class might have one or more parent or child classes. If a class has a parent class, we say it is derived or inherited from the parent class and it represents an “IS-A” type relationship. That is to say, the child class “IS-A” type of the parent class.
  Therefore, if a class inherits from another class, it automatically obtains a lot of the same functionality and properties from that class and can be extended to contain separate code and data. A nice feature of inheritance is that it often leads to good code reuse since a parent class’ functions don’t need to be re-defined in any of its child classes.
  
  Polymorphism
In OOP, polymorphism allows for the uniform treatment of classes in a hierarchy. Therefore, calling code only needs to be written to handle objects from the root of the hierarchy, and any object instantiated by any child class in the hierarchy will be handled in the same way.
  Because derived objects share the same interface as their parents, the calling code can call any function in that class’ interface. At run-time, the appropriate function will be called depending on the type of object passed leading to possibly different behaviors.

Lamda: Metodo anonimo que no necesita identificador para ser llamado

interface:
Definen comportamiento
Obliga a la clase que la implementa a sobrescribir todos los metodos que sean declarados(calse 100% abstracta)
Puede heredar de otra interface
Los metodos en las interfaces son public-abstract por defecto
Variables en las interfacea son public-static-final por defecto
Puede tener metodos default (Java 8)

Clase abstracta:
No puede ser instanciada y debe tener al menos un metodo abstracto

Final: Determina que un atributo no puede ser sobreescrito o redefinido

Finally: Bloque de codigo que se ejecuta al final de un bloque try-catch

Finalize: metodo llamado por el recolector de basura (Gargage Collector) de un objeto cuando la recolección de elementos no utilizados determina que no hay más referencias al objeto.

List: permite duplicados, no tiene ordenamiento

Set: no permite duplicados tiene ordenamiento

Map: llave-valor, llaves no pueden ser duplicadas

LinkedList elementos doblemente ligados entresi, rapido para agregar o quitar elementos, lento para obtener los datos

ArrayList, rapido para el acceso a la informacion, lento para el ordenamiento en caso de quitar un elemento y mantener las posiciones

Serializacion: Permite convertir un objeto a bytes que pueden ser leidos y posteriormente volver a construir el objeto

Checked Exception: Todas las excepciones de este tipo son subclases que heredan desde Exception

Excepcion: Situacion no esperada en la ejecucion de un programa Java

Exceptions tipo Error: Excepciones en las que el sistema no puede hacer nada con ellas, son clasificadas como errores irreversibles y que en su mayoría provienen desde la JVM, como por ejemplo: IOError, NoClassDefFoundError, NoSuchMethodError, OutOfMemoryError y VirtualMachineError

Unchecked Exception: Errores en tiempo de Runtime, no tienen la obligación de ser declaradas con la cláusula throws, no se tiene la obligación de atraparlas con un catch

Servlets: deben implementar la clase abstracta httpservlet e implementar doget dopost

Autoboxing: Compilador convierte un tipo primitivo a un tipo object

Unboxing: Compilador convierte un objeto a tipo primitivo

Upcasting: Clase inferior a clase superior

Downcasting: Clase superior a clase inferior

Hashcode: Numero que representa un objeto y genera el numero de acuerdo a sus atributos

API: Conjunto de clses Java enpaquetadas en JAR con funciones especificas

Https request y response: ???

Rest: Representational State Transfer
Interfaz entre sistemas que use protocolo HTTP para obtener datos o generar operaciones sobre esos datos en todos los formatos posible
Interfaz de programación de aplicaciones que se apoya en la arquitectura REST para el desarrollo de aplicaciones en red
URI: uniform resource identifier
Cadena de caracteres que identifica los recursos de una red de forma unívoca

Token: es un valor que nos autentica en el servidor

Hilos: Un hilo es un flujo de control dentro de un programa. Creando varios hilos podremos realizar varias tareas simultáneamente. Cada hilo tendrá sólo un contexto de ejecución (contador de programa, pila de ejecución). Es decir, a diferencia de los procesos UNIX, no tienen su propio espacio de memoria sino que acceden todos al mismo espacio de memoria común, por lo que será importante su sincronización cuando tengamos varios hilos accediendo a los mismos objetos

El garbage collector remueve todas las variables que no son instanciadas

Diferencia entre callable y runable: callable si regresa informacion, runable

Rest es la arquitectura y restful es la implementacion de la arquitectura con web services

403 (Acceso prohibido)
400 (petición incorrecta, p.ej. falta un campo o su valor no es válido)
404 (Not found)
500 (Error del lado del servidor al intentar crear el recurso, p.ej. se ha caído la BD)
201 (Recurso creado correctamente)
200 (Recurso modificado correctamente)
